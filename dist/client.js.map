{"version":3,"sources":["dist/client.es6.js"],"names":[],"mappings":"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","file":"dist/client.es6.js","sourcesContent":["'use strict';\r\n// (4.22208334636).fixed(n) will return fixed point value to n places, default n = 3\r\nNumber.prototype.fixed = function(n_) { n_ = n_ || 3; return parseFloat(this.toFixed(n_)); };\r\n\r\nclass Common\r\n{\r\n    constructor()\r\n    {\r\n        //The speed at which the clients move.\r\n        this.avatarspeed = 120;\r\n        this.owntime_ = 0.016;\r\n        this.world = { width: 720, height: 480 };\r\n    }\r\n\r\n    /*\r\n     Shared between server and client.\r\n     In this example, `item` is always of type avatar.\r\n     */\r\n    check_collision(item_)\r\n    {\r\n        if (item_.pos.x < item_.pos_limits.x_min || item_.pos.x > item_.pos_limits.x_max)\r\n        {\r\n            item_.pos.x = Math.min(Math.max(item_.pos.x, item_.pos_limits.x_min),\r\n                                   item_.pos_limits.x_max);\r\n        }\r\n        if (item_.pos.y < item_.pos_limits.y_min || item_.pos.y > item_.pos_limits.y_max)\r\n        {\r\n            item_.pos.y = Math.min(Math.max(item_.pos.y, item_.pos_limits.y_min),\r\n                                   item_.pos_limits.y_max);\r\n        }\r\n        //Fixed point helps be more deterministic\r\n        item_.pos.x = item_.pos.x.fixed(4);\r\n        item_.pos.y = item_.pos.y.fixed(4);\r\n    }\r\n\r\n    process_input(avatar_)\r\n    {\r\n        //It's possible to have recieved multiple inputs by now,\r\n        //so we process each one\r\n        let x_dir = 0;\r\n        let y_dir = 0;\r\n        let ic = avatar_.inputs.length;\r\n        if (ic) //if we have inputs\r\n        {\r\n            for (let j = 0; j < ic; ++j) //for each input command\r\n            {\r\n                //don't process ones we already have simulated locally\r\n                if (avatar_.inputs[j].seq <= avatar_.last_input_seq) { continue; }\r\n\r\n                let input = avatar_.inputs[j].inputs;\r\n                let c = input.length;\r\n                for (let i = 0; i < c; ++i) //for all input values\r\n                {\r\n                    let key = input[i];\r\n                    if (key == 'l') { x_dir -= 1; }\r\n                    if (key == 'r') { x_dir += 1; }\r\n                    if (key == 'd') { y_dir += 1; }\r\n                    if (key == 'u') { y_dir -= 1; }\r\n                }\r\n            }\r\n        }\r\n\r\n        //we have a direction vector now, so apply the same physics as the client\r\n        let resulting_vector = this.physics_movement_vector_from_direction(x_dir, y_dir);\r\n        if (avatar_.inputs.length)\r\n        {\r\n            //we can now clear the array since these have been processed\r\n            avatar_.last_input_time = avatar_.inputs[ic - 1].time;\r\n            avatar_.last_input_seq = avatar_.inputs[ic - 1].seq;\r\n        }\r\n\r\n        //give it back\r\n        return resulting_vector;\r\n    }\r\n\r\n    physics_movement_vector_from_direction(x_, y_)\r\n    {\r\n        //Must be fixed step, at physics sync speed.\r\n        return { x: (x_ * (this.avatarspeed * 0.015)).fixed(3),\r\n                 y: (y_ * (this.avatarspeed * 0.015)).fixed(3) };\r\n    }\r\n\r\n    start_physics_loop(component_)\r\n    {\r\n        //Set up some physics integration values\r\n        this._pdt = 0.0001; //The physics update delta time\r\n        this._pdte = new Date().getTime(); //The physics update last delta time\r\n        //A local timer for precision on server and client\r\n        this.owntime_ = 0.016; //The local timer\r\n        this._dt = new Date().getTime(); //The local timer delta\r\n        this._dte = new Date().getTime(); //The local timer last frame time\r\n\r\n        //Start a physics loop, this is separate to the rendering\r\n        //as this happens at a fixed frequency\r\n        setInterval(() => { this._pdt = (new Date().getTime() - this._pdte) / 1000.0;\r\n                            this._pdte = new Date().getTime();\r\n                            component_.update_physics(this._pdt); },\r\n                    15);\r\n\r\n        //Start a fast paced timer for measuring time easier\r\n        setInterval(() => { this._dt = new Date().getTime() - this._dte;\r\n                            this._dte = new Date().getTime();\r\n                            this.set_owntime(this.owntime_ + this._dt / 1000.0); },\r\n                    4);\r\n    }\r\n\r\n    set_owntime(v_) { if (v_) { this.owntime_ = v_;} }\r\n    get_owntime() { return this.owntime_; }\r\n\r\n    /*\r\n     Helper functions for the session code\r\n\r\n     Here we have some common maths and session related code to make working with 2d vectors easy,\r\n     as well as some helpers for rounding numbers to fixed point.\r\n     */\r\n    //copies a 2d vector like object from one to another\r\n    new_pos(a_) { return { x: a_.x, y: a_.y }; }\r\n    //Add a 2d vector with another one and return the resulting vector\r\n    v_add(a_, b_) { return { x: (a_.x + b_.x).fixed(), y: (a_.y + b_.y).fixed() }; }\r\n    //Subtract a 2d vector with another one and return the resulting vector\r\n    v_sub(a_, b_) { return { x: (a_.x - b_.x).fixed(), y: (a_.y - b_.y).fixed() }; }\r\n    //Multiply a 2d vector with a scalar value and return the resulting vector\r\n    v_mul_scalar(a_, b_) { return { x: (a_.x * b_).fixed(), y: (a_.y * b_).fixed() }; }\r\n    //Simple linear interpolation\r\n    lerp(p_, n_, t_) { let t = Number(t_); t = Math.max(0, Math.min(1, t)).fixed(); return (p_ + t * (n_ - p_)).fixed(); }\r\n    //Simple linear interpolation between 2 vectors\r\n    v_lerp(v_, tv_, t_) { return { x: this.lerp(v_.x, tv_.x, t_), y: this.lerp(v_.y, tv_.y, t_) }; }\r\n};\r\n\r\nlet cm = new Common();\r\n\r\nclass ClView\r\n{\r\n    constructor(viewport_)\r\n    {\r\n        this.ctx_ = viewport_.getContext('2d');\r\n        //Create a keyboard handler\r\n        this.keyboard = new THREEx.KeyboardState();\r\n        this.input_queue = [];\r\n    }\r\n\r\n    handle_input()\r\n    {\r\n        //if(this.lit > local_time) return;\r\n        //this.lit = local_time+0.5; //one second delay\r\n\r\n        //This takes input from the client and keeps a record,\r\n        //It also sends the input information to the server immediately\r\n        //as it is pressed. It also tags each input with a sequence number.\r\n        let x_dir = 0,\r\n            y_dir = 0;\r\n        this.input_queue = [];\r\n\r\n        if (this.keyboard.pressed('A') || this.keyboard.pressed('left')) //left\r\n        { x_dir = -1; this.input_queue.push('l'); }\r\n        if (this.keyboard.pressed('D') || this.keyboard.pressed('right')) //right\r\n        { x_dir = 1; this.input_queue.push('r'); }\r\n        if (this.keyboard.pressed('S') || this.keyboard.pressed('down')) //down\r\n        { y_dir = 1; this.input_queue.push('d'); }\r\n        if (this.keyboard.pressed('W') || this.keyboard.pressed('up')) //up\r\n        { y_dir = -1; this.input_queue.push('u'); }\r\n\r\n        return this.input_queue;\r\n\r\n        // if (!this.input_queue.length) { return { x: 0, y: 0 }; }\r\n\r\n        // //Return the direction if needed\r\n        // return cm.physics_movement_vector_from_direction(x_dir, y_dir);\r\n    }\r\n\r\n    draw(avatars_)\r\n    {\r\n        //Clear the screen area\r\n        this.ctx_.clearRect(0, 0, 720, 480);\r\n        //draw help/information if required\r\n        this.show_info_(avatars_);\r\n        //Now they should have updated, we can draw the entity\r\n        this.show_avatar_(avatars_.other);\r\n        //And then we finally draw\r\n        this.show_avatar_(avatars_.self);\r\n    }\r\n\r\n    draw_debug(avatars_, ghosts_, naive_approach_, show_dest_pos_, show_sv_pos_)\r\n    {\r\n        if (!naive_approach_)\r\n        {\r\n            //and these\r\n            if (show_dest_pos_) { this.show_avatar_(ghosts_.pos_other); }\r\n\r\n            //and lastly draw these\r\n            if (show_sv_pos_)\r\n            {\r\n                this.show_avatar_(ghosts_.sv_pos_self);\r\n                this.show_avatar_(ghosts_.sv_pos_other);\r\n            }\r\n        }\r\n    }\r\n\r\n    show_avatar_(avatar_)\r\n    {\r\n        //Set the color for this avatar\r\n        this.ctx_.fillStyle = avatar_.color;\r\n        //Draw a rectangle for us\r\n        this.ctx_.fillRect(avatar_.pos.x - avatar_.size.hx,\r\n                           avatar_.pos.y - avatar_.size.hy,\r\n                           avatar_.size.x, avatar_.size.y);\r\n        //Draw a status update\r\n        this.ctx_.fillStyle = avatar_.info_color;\r\n        this.ctx_.fillText(avatar_.state, avatar_.pos.x + 10, avatar_.pos.y + 4);\r\n    }\r\n\r\n    show_info_(avatars_)\r\n    {\r\n        //We don't want this to be too distracting\r\n        this.ctx_.fillStyle = 'rgba(255,255,255,0.3)';\r\n\r\n        //They can hide the help with the debug GUI\r\n        if (this.show_help)\r\n        {\r\n            this.ctx_.fillText('net_offset : local offset of others avatars and their server updates. Avatars are net_offset \"in the past\" so we can smoothly draw them interpolated.', 10, 30);\r\n            this.ctx_.fillText('server_time : last known session time on server', 10, 70);\r\n            this.ctx_.fillText('client_time : delayed session time on client for other avatars only (includes the net_offset)', 10, 90);\r\n            this.ctx_.fillText('net_latency : Time from you to the server. ', 10, 130);\r\n            this.ctx_.fillText('net_ping : Time from you to the server and back. ', 10, 150);\r\n            this.ctx_.fillText('fake_lag : Add fake ping/lag for testing, applies only to your inputs (watch sv_pos block!). ', 10, 170);\r\n            this.ctx_.fillText('client_smoothing/client_smooth : When updating avatars information from the server, it can smooth them out.', 10, 210);\r\n            this.ctx_.fillText(' This only applies to other clients when prediction is enabled, and applies to local avatar with no prediction.', 170, 230);\r\n        }\r\n\r\n        //Draw some information for the host\r\n        if (avatars_.self.host)\r\n        {\r\n            this.ctx_.fillStyle = 'rgba(255,255,255,0.7)';\r\n            this.ctx_.fillText('You are the host', 10, 465);\r\n        }\r\n\r\n        //Reset the style back to full white.\r\n        this.ctx_.fillStyle = 'rgba(255,255,255,1)';\r\n    }\r\n\r\n    ////////////////// informations & debug\r\n    create_debug_gui(cl_presenter_, avatars_)\r\n    {\r\n        let sock = cl_presenter_,\r\n            sess = cl_presenter_.session;\r\n\r\n        this.gui = new dat.GUI();\r\n\r\n        let _avatarsettings = this.gui.addFolder('Your settings');\r\n\r\n        this.colorcontrol = _avatarsettings.addColor(avatars_.self, 'color');\r\n\r\n        //We want to know when we change our color so we can tell\r\n        //the server to tell the other clients for us\r\n        this.colorcontrol.onChange((value_) => { avatars_.self.color = value_;\r\n                                                 localStorage.setItem('color', value_);\r\n                                                 this.socket.send('c.' + value_);\r\n                                               });\r\n        _avatarsettings.open();\r\n\r\n        let _othersettings = this.gui.addFolder('Methods');\r\n        _othersettings.add(sock, 'naive_approach').listen();\r\n        _othersettings.add(sess, 'client_smoothing').listen();\r\n        _othersettings.add(sess, 'client_smooth').listen();\r\n        _othersettings.add(sock, 'client_predict').listen();\r\n\r\n        let _debugsettings = this.gui.addFolder('Debug view');\r\n        _debugsettings.add(sess, 'show_help').listen();\r\n        _debugsettings.add(sess, 'fps_avg').listen();\r\n        _debugsettings.add(sock, 'show_sv_pos').listen();\r\n        _debugsettings.add(sock, 'show_dest_pos').listen();\r\n        _debugsettings.add(cm, 'owntime_').listen();\r\n\r\n        _debugsettings.open();\r\n\r\n        let _consettings = this.gui.addFolder('Connection');\r\n        _consettings.add(sess, 'net_latency').step(0.001).listen();\r\n        _consettings.add(sess, 'net_ping').step(0.001).listen();\r\n\r\n        //When adding fake lag, we need to tell the server about it.\r\n        let lag_control = _consettings.add(sock, 'fake_lag').step(0.001).listen();\r\n        lag_control.onChange((value) => { this.socket.send('l.' + value); });\r\n\r\n        _consettings.open();\r\n\r\n        let _netsettings = this.gui.addFolder('Networking');\r\n        _netsettings.add(sock, 'net_offset').min(0.01).step(0.001).listen();\r\n        _netsettings.add(sock, 'server_time').step(0.001).listen();\r\n        _netsettings.add(sock, 'client_time').step(0.001).listen();\r\n        _netsettings.add(sock, 'oldest_tick').step(0.001).listen();\r\n\r\n        _netsettings.open();\r\n    }\r\n};\r\n\r\nclass ClSession\r\n{\r\n    constructor(socket_, avatars_, ghosts_)\r\n    {\r\n        this.socket = socket_;\r\n        this.avatars = avatars_;\r\n        this.ghosts = ghosts_;\r\n\r\n        this.show_help = false; //Whether or not to draw the help text\r\n\r\n        this.client_smoothing = true; //Whether or not the client side prediction tries to smooth things out\r\n        this.client_smooth = 25; //amount of smoothing to apply to client update dest\r\n\r\n        this.net_latency = 0.001; //the latency between the client and the server (ping/2)\r\n        this.net_ping = 0.001; //The round trip time from here to the server,and back\r\n\r\n        this.target_time = 0.01; //the time where we want to be in the server timeline\r\n        this.lastframetime = 0;\r\n        this.dt = 0.016; //The time that the last frame took to run\r\n\r\n        this.fps = 0; //The current instantaneous fps (1/this.dt)\r\n        this.fps_avg_count = 0; //The number of samples we have taken for fps_avg\r\n        this.fps_avg = 0; //The current average fps displayed in the debug UI\r\n        this.fps_avg_acc = 0; //The accumulation of the last avgcount fps samples\r\n\r\n        this.lit = 0;\r\n        this.llt = new Date().getTime();\r\n    }\r\n\r\n    on_ready_session(data_)\r\n    {\r\n        let server_time = parseFloat(data_.replace('-', '.'));\r\n\r\n        let socket_host = this.avatars.self.host ? this.avatars.self : this.avatars.other;\r\n        let socket_client = this.avatars.self.host ? this.avatars.other : this.avatars.self;\r\n\r\n        cm.set_owntime(server_time + this.net_latency);\r\n        console.log('server time is about ' + cm.get_owntime());\r\n\r\n        //Store their info colors for clarity. server is always blue\r\n        socket_host.info_color = '#2288cc';\r\n        socket_client.info_color = '#cc8822';\r\n\r\n        //Update their information\r\n        socket_host.state = 'local_pos(hosting)';\r\n        socket_client.state = 'local_pos(joined)';\r\n\r\n        this.avatars.self.state = 'YOU ' + this.avatars.self.state;\r\n\r\n        //Make sure colors are synced up\r\n        this.socket.send('c.' + this.avatars.self.color);\r\n    }\r\n\r\n    on_join_session(data_)\r\n    {\r\n        //We are not the host\r\n        this.avatars.self.host = false;\r\n        //Update the local state\r\n        this.avatars.self.state = 'connected.joined.waiting';\r\n        this.avatars.self.info_color = '#00bb00';\r\n\r\n        //Make sure the positions match servers and other clients\r\n        this.reset_positions_();\r\n    }\r\n\r\n    on_host_session(data_)\r\n    {\r\n        //The server sends the time when asking us to host, but it should be a new session.\r\n        //so the value will be really small anyway (15 or 16ms)\r\n        let server_time = parseFloat(data_.replace('-', '.'));\r\n\r\n        //Get an estimate of the current time on the server\r\n        cm.set_owntime(server_time + this.net_latency);\r\n\r\n        //Set the flag that we are hosting, this helps us position respawns correctly\r\n        this.avatars.self.host = true;\r\n\r\n        //Update debugging information to display state\r\n        this.avatars.self.state = 'hosting.waiting for a avatar';\r\n        this.avatars.self.info_color = '#cc0000';\r\n\r\n        //Make sure we start in the correct place as the host.\r\n        this.reset_positions_();\r\n    }\r\n\r\n    on_otherclientcolorchange(data_)\r\n    {\r\n        this.avatars.other.color = data_;\r\n    }\r\n\r\n    on_ping(data_)\r\n    {\r\n        this.net_ping = new Date().getTime() - parseFloat(data_);\r\n        this.net_latency = this.net_ping / 2;\r\n    }\r\n\r\n    reset_positions_()\r\n    {\r\n        let socket_host = this.avatars.self.host ? this.avatars.self : this.avatars.other;\r\n        let socket_client = this.avatars.self.host ? this.avatars.other : this.avatars.self;\r\n\r\n        //Host always spawns at the top left.\r\n        socket_host.pos = { x: 20, y: 20 };\r\n        socket_client.pos = { x: 500, y: 200 };\r\n\r\n        //Make sure the local avatar physics is updated\r\n        this.avatars.self.old_state.pos = cm.new_pos(this.avatars.self.pos);\r\n        this.avatars.self.pos = cm.new_pos(this.avatars.self.pos);\r\n        this.avatars.self.cur_state.pos = cm.new_pos(this.avatars.self.pos);\r\n\r\n        //Position all debug view items to their owners position\r\n        this.ghosts.sv_pos_self.pos = cm.new_pos(this.avatars.self.pos);\r\n        this.ghosts.sv_pos_other.pos = cm.new_pos(this.avatars.other.pos);\r\n        this.ghosts.pos_other.pos = cm.new_pos(this.avatars.other.pos);\r\n    }\r\n\r\n    update(t_, server_updates_, client_predict_, naive_approach_, pdt_, client_time_, tx_packet_)\r\n    {\r\n        //Capture inputs from the avatar\r\n        this.socket.send(tx_packet_);\r\n\r\n        //Work out the delta time\r\n        this.dt = this.lastframetime ? ((t_ - this.lastframetime) / 1000.0).fixed() : 0.016;\r\n        //Store the last frame time\r\n        this.lastframetime = t_;\r\n\r\n        //Network avatar just gets drawn normally, with interpolation from\r\n        //the server updates, smoothing out the positions from the past.\r\n        //Note that if we don't have prediction enabled - this will also\r\n        //update the actual local client position on screen as well.\r\n        if (!naive_approach_)\r\n        {\r\n            this.process_net_updates_(server_updates_, client_predict_, naive_approach_,\r\n                                      pdt_, client_time_);\r\n        }\r\n\r\n        //When we are doing client side prediction, we smooth out our position\r\n        //across frames using local input states we have stored.\r\n        this.update_local_position(client_predict_, pdt_);\r\n\r\n        //Work out the fps average\r\n        this.refresh_fps_();\r\n    }\r\n\r\n    process_net_updates_(server_updates_, client_predict_, naive_approach_, pdt_, client_time_)\r\n    {\r\n        //No updates...\r\n        if (!server_updates_.length) { return; }\r\n\r\n        //First : Find the position in the updates, on the timeline\r\n        //We call this current_time, then we find the past_pos and the target_pos using this,\r\n        //searching throught the server_updates array for current_time in between 2 other times.\r\n        // Then :  other avatar position = lerp ( past_pos, target_pos, current_time );\r\n\r\n        //Find the position in the timeline of updates we stored.\r\n        let current_time = client_time_;\r\n        let count = server_updates_.length - 1;\r\n        let target = null;\r\n        let previous = null;\r\n\r\n        //We look from the 'oldest' updates, since the newest ones\r\n        //are at the end (list.length-1 for example). This will be expensive\r\n        //only when our time is not found on the timeline, since it will run all\r\n        //samples. Usually this iterates very little before breaking out with a target.\r\n        for (let i = 0; i < count; ++i)\r\n        {\r\n            let point = server_updates_[i];\r\n            let next_point = server_updates_[i + 1];\r\n\r\n            //Compare our point in time with the server times we have\r\n            if (current_time > point.t && current_time < next_point.t)\r\n            {\r\n                target = next_point;\r\n                previous = point;\r\n                break;\r\n            }\r\n        }\r\n\r\n        //With no target we store the last known\r\n        //server position and move to that instead\r\n        if (!target)\r\n        {\r\n            target = server_updates_[0];\r\n            previous = server_updates_[0];\r\n        }\r\n\r\n        //Now that we have a target and a previous destination,\r\n        //We can interpolate between then based on 'how far in between' we are.\r\n        //This is simple percentage maths, value/target = [0,1] range of numbers.\r\n        //lerp requires the 0,1 value to lerp to? thats the one.\r\n        if (!target || !previous) { return; }\r\n\r\n        this.target_time = target.t;\r\n\r\n        let difference = this.target_time - current_time;\r\n        let max_difference = (target.t - previous.t).fixed(3);\r\n        let time_point = (difference / max_difference).fixed(3);\r\n\r\n        //Because we use the same target and previous in extreme cases\r\n        //It is possible to get incorrect values due to division by 0 difference\r\n        //and such. This is a safe guard and should probably not be here. lol.\r\n        if (isNaN(time_point) || time_point == -Infinity || time_point == Infinity) { time_point = 0; }\r\n\r\n        //The most recent server update\r\n        let latest_server_data = server_updates_[server_updates_.length - 1];\r\n\r\n        //These are the exact server positions from this tick, but only for the ghost\r\n        let other_sv_pos = this.avatars.self.host ? latest_server_data.cp : latest_server_data.hp;\r\n\r\n        //The other avatars positions in this timeline, behind us and in front of us\r\n        let other_target_pos = this.avatars.self.host ? target.cp : target.hp;\r\n        let other_past_pos = this.avatars.self.host ? previous.cp : previous.hp;\r\n\r\n        //update the dest block, this is a simple lerp\r\n        //to the target from the previous point in the server_updates buffer\r\n        this.ghosts.sv_pos_other.pos = cm.new_pos(other_sv_pos);\r\n        this.ghosts.pos_other.pos = cm.v_lerp(other_past_pos, other_target_pos, time_point);\r\n\r\n        this.avatars.other.pos = this.update_pos_(this.avatars.other, this.ghosts.pos_other.pos, pdt_);\r\n\r\n        //Now, if not predicting client movement , we will maintain the local avatar position\r\n        //using the same method, smoothing the avatars information from the past.\r\n        if (!client_predict_ && !naive_approach_)\r\n        {\r\n            //These are the exact server positions from this tick, but only for the ghost\r\n            let my_sv_pos = this.avatars.self.host ? latest_server_data.hp : latest_server_data.cp;\r\n\r\n            //The other avatars positions in this timeline, behind us and in front of us\r\n            let my_target_pos = this.avatars.self.host ? target.hp : target.cp;\r\n            let my_past_pos = this.avatars.self.host ? previous.hp : previous.cp;\r\n\r\n            //Snap the ghost to the new server position\r\n            this.ghosts.sv_pos_self.pos = cm.new_pos(my_sv_pos);\r\n            let local_target = cm.v_lerp(my_past_pos, my_target_pos, time_point);\r\n\r\n            // Smoothly follow the destination position\r\n            this.avatars.self.pos = this.update_pos_(this.avatars.self, local_target, pdt_);\r\n        }\r\n    }\r\n\r\n    update_pos_(item_, target_pos_, pdt_)\r\n    {\r\n        if (this.client_smoothing) { return cm.v_lerp(item_.pos, target_pos_, pdt_ * this.client_smooth); }\r\n        return cm.new_pos(target_pos_);\r\n    }\r\n\r\n    update_local_position(client_predict_, pdt_)\r\n    {\r\n        if (!client_predict_) { return; }\r\n\r\n        //Work out the time we have since we updated the state\r\n        let t = (cm.get_owntime() - this.avatars.self.state_time) / pdt_;\r\n\r\n        //Then store the states for clarity,\r\n        let old_state = this.avatars.self.old_state.pos;\r\n        let current_state = this.avatars.self.cur_state.pos;\r\n\r\n        //Make sure the visual position matches the states we have stored\r\n        // this.avatars.self.pos = cm.v_add(old_state,\r\n        //                                  cm.v_mul_scalar(cm.v_sub(current_state,\r\n        //                                                           old_state), t ));\r\n        this.avatars.self.pos = current_state;\r\n\r\n        //We handle collision on client if predicting.\r\n        cm.check_collision(this.avatars.self);\r\n    }\r\n\r\n    refresh_fps_()\r\n    {\r\n        //We store the fps for 10 frames, by adding it to this accumulator\r\n        this.fps = 1 / this.dt;\r\n        this.fps_avg_acc += this.fps;\r\n        this.fps_avg_count++;\r\n\r\n        //When we reach 10 frames we work out the average fps\r\n        if (this.fps_avg_count >= 10)\r\n        {\r\n            this.fps_avg = this.fps_avg_acc / 10;\r\n            this.fps_avg_count = 1;\r\n            this.fps_avg_acc = this.fps;\r\n        }\r\n    }\r\n};\r\n\r\nclass ClPresenter\r\n{\r\n    constructor()\r\n    {\r\n    }\r\n\r\n    init(viewport_)\r\n    {\r\n        this.viewport_ = viewport_;\r\n        this.viewport_.width = cm.world.width;\r\n        this.viewport_.height = cm.world.height;\r\n        this.view = new ClView(this.viewport_);\r\n\r\n        this.input_seq = 0;  //When predicting client inputs, we store the last input as a sequence number\r\n\r\n        //Create the default configuration settings\r\n        this.naive_approach = false; //Whether or not to use the naive approach\r\n        this.client_predict = true; //Whether or not the client is predicting input\r\n        this.show_sv_pos = false; //Whether or not to show the server position\r\n        this.show_dest_pos = false; //Whether or not to show the interpolation goal\r\n\r\n        this.last_ping_time = 0.001; //The time we last sent a ping\r\n        this.fake_lag = 0; //If we are simulating lag, this applies only to the input client (not others)\r\n        this.fake_lag_time = 0;\r\n\r\n        this.net_offset = 100; //100 ms latency between server and client interpolation for other clients\r\n        this.buffer_size = 2; //The size of the server history to keep for rewinding/interpolating.\r\n        this.oldest_tick = 0.01; //the last time tick we have available in the buffer\r\n        this.client_time = 0.01; //Our local 'clock' based on server time - client interpolation(net_offset).\r\n        this.server_time = 0.01; //The time the server reported it was at, last we heard from it\r\n\r\n        this.pdt = 0.0001; // for smoothing (check ClSession)\r\n\r\n        this.session = null;\r\n\r\n        // wait for resources\r\n        this.load_model_();\r\n    }\r\n\r\n    start_(models_)\r\n    {\r\n        this.avatars = models_[0];\r\n        this.ghosts = models_[1];\r\n        //A list of recent server updates we interpolate across\r\n        //This is the buffer that is the driving factor for our networking\r\n        this.server_updates = [];\r\n\r\n        //Connect to the socket.io server!\r\n        this.connect_to_server_();\r\n\r\n        //We start pinging the server to determine latency\r\n        this.create_ping_timer_();\r\n\r\n        //Set their colors from the storage or locally\r\n        this.color = localStorage.getItem('color') || '#cc8822';\r\n        localStorage.setItem('color', this.color);\r\n        this.avatars.self.color = this.color;\r\n\r\n        //Make this only if requested\r\n        if (String(window.location).indexOf('debug') != -1)\r\n        { this.view.create_debug_gui(this, this.avatars); }\r\n        cm.start_physics_loop(this);\r\n\r\n        // Start the loop\r\n        this.update_(new Date().getTime());\r\n    }\r\n\r\n    //Main update loop\r\n    update_(t_)\r\n    {\r\n        let input_q = this.view.handle_input();\r\n        this.input_seq += 1; //Update what sequence we are on now\r\n\r\n        //Store the input state as a snapshot of what happened.\r\n        this.avatars.self.inputs.push({ inputs: input_q,\r\n                                        time: cm.get_owntime().fixed(3),\r\n                                        seq: this.input_seq });\r\n\r\n        //Update the session specifics\r\n        if (this.session)\r\n        {\r\n            //Send the packet of information to the server.\r\n            //The input packets are labelled with an 'i' in front.\r\n            let tx_packet = 'i.' + input_q.join('-')\r\n                    + '.' + cm.get_owntime().toFixed(3).replace('.', '-')\r\n                    + '.' + this.input_seq;\r\n            this.session.update(t_, this.server_updates, this.client_predict, this.naive_approach,\r\n                                this.pdt, this.client_time, tx_packet);\r\n        }\r\n\r\n        // drawing job\r\n        this.view.draw(this.avatars);\r\n        this.view.draw_debug(this.avatars, this.ghosts, this.naive_approach,\r\n                             this.show_dest_pos, this.show_sv_pos);\r\n\r\n        //schedule the next update\r\n        this.updateid = window.requestAnimationFrame(this.update_.bind(this), this.viewport_);\r\n    }\r\n\r\n    stop_update() { window.cancelAnimationFrame(this.updateid); }\r\n\r\n    load_model_()\r\n    {\r\n        let req = new XMLHttpRequest();\r\n\r\n        req.addEventListener('loadend', () => {\r\n            if (req.status === 200)\r\n            {\r\n                let models = [{ self: this.gen_model_(req.response),\r\n                                other: this.gen_model_(req.response) },\r\n                              { sv_pos_self: this.gen_model_(req.response), //Our ghost position on the server\r\n                                sv_pos_other: this.gen_model_(req.response), //The other avatars server position as we receive it\r\n                                pos_other: this.gen_model_(req.response) }]; //The other avatars ghost destination position (the lerp)]\r\n                models[1].sv_pos_self.state = 'sv_pos';\r\n                models[1].sv_pos_self.info_color = 'rgba(255,255,255,0.2)';\r\n                models[1].sv_pos_self.pos = { x: 20, y: 20 };\r\n\r\n                models[1].sv_pos_other.state = 'sv_pos';\r\n                models[1].sv_pos_other.info_color = 'rgba(255,255,255,0.2)';\r\n                models[1].sv_pos_other.pos = { x: 500, y: 200 };\r\n\r\n                models[1].pos_other.state = 'dest_pos';\r\n                models[1].pos_other.info_color = 'rgba(255,255,255,0.1)';\r\n                models[1].pos_other.pos = { x: 500, y: 200 };\r\n\r\n                this.start_(models);\r\n            }\r\n            else { console.error(req.status + ' ' + req.statusText); }\r\n        });\r\n        req.open('GET', '/model', true);\r\n        req.responseType = 'json';\r\n        req.timeout = 4000;\r\n        req.ontimeout = (() => { alert(\"timed out\"); });\r\n        req.send();\r\n    }\r\n\r\n    gen_model_(json_) { return Object.assign({}, JSON.parse(json_)); }\r\n\r\n    process_net_prediction_correction_()\r\n    {\r\n        //No updates...\r\n        if (!this.server_updates.length) { return; }\r\n\r\n        //The most recent server update\r\n        let latest_server_data = this.server_updates[this.server_updates.length - 1];\r\n\r\n        //Our latest server position\r\n        let my_sv_pos = this.avatars.self.host ? latest_server_data.hp : latest_server_data.cp;\r\n\r\n        //Update the debug server position block\r\n        this.ghosts.sv_pos_self.pos = cm.new_pos(my_sv_pos);\r\n\r\n        //here we handle our local input prediction ,\r\n        //by correcting it with the server and reconciling its differences\r\n\r\n        let my_last_input_on_server = this.avatars.self.host ? latest_server_data.his : latest_server_data.cis;\r\n        if (!my_last_input_on_server) { return; }\r\n\r\n        //The last input sequence index in my local input list\r\n        let lastinputseq_index = -1;\r\n        //Find this input in the list, and store the index\r\n        for (let i = 0; i < this.avatars.self.inputs.length; ++i)\r\n        {\r\n            if (this.avatars.self.inputs[i].seq == my_last_input_on_server)\r\n            { lastinputseq_index = i; break; }\r\n        }\r\n\r\n        //Now we can crop the list of any updates we have already processed\r\n        if (lastinputseq_index == -1) { return; }\r\n\r\n        //so we have now gotten an acknowledgement from the server that our inputs here have been accepted\r\n        //and that we can predict from this known position instead\r\n\r\n        //remove the rest of the inputs we have confirmed on the server\r\n        let number_to_clear = Math.abs(lastinputseq_index - (-1));\r\n        this.avatars.self.inputs.splice(0, number_to_clear);\r\n        //The avatar is now located at the new server position, authoritive server\r\n        this.avatars.self.cur_state.pos = cm.new_pos(my_sv_pos);\r\n        this.avatars.self.last_input_seq = lastinputseq_index;\r\n\r\n        //Now we reapply all the inputs that we have locally that\r\n        //the server hasn't yet confirmed. This will 'keep' our position the same,\r\n        //but also confirm the server position at the same time.\r\n        this.update_physics(this.pdt);\r\n        this.session.update_local_position(this.client_predict, this.pdt);\r\n    }\r\n\r\n    update_physics(pdt_)\r\n    {\r\n        this.pdt = pdt_;\r\n        //Fetch the new direction from the input buffer,\r\n        //and apply it to the state so we can smooth it in the visual state\r\n\r\n        if (!this.client_predict) { return; }\r\n\r\n        this.avatars.self.old_state.pos = cm.new_pos(this.avatars.self.cur_state.pos);\r\n        this.avatars.self.cur_state.pos = cm.v_add(this.avatars.self.old_state.pos,\r\n                                                   cm.process_input(this.avatars.self));\r\n        this.avatars.self.state_time = cm.get_owntime();\r\n    }\r\n\r\n    create_ping_timer_()\r\n    {\r\n        //Set a ping timer to 1 second, to maintain the ping/latency between\r\n        //client and server and calculated roughly how our connection is doing\r\n        setInterval(() => { this.last_ping_time = new Date().getTime() - this.fake_lag;\r\n                            this.socket.send('p.' + this.last_ping_time); },\r\n                    1000);\r\n    }\r\n\r\n    // callbacks\r\n    on_disconnect_(data_)\r\n    {\r\n        //When we disconnect, we don't know if the other avatar is\r\n        //connected or not, and since we aren't, everything goes to offline\r\n        this.avatars.self.info_color = 'rgba(255,255,255,0.1)';\r\n        this.avatars.self.state = 'not-connected';\r\n        this.avatars.self.online = false;\r\n\r\n        this.avatars.other.info_color = 'rgba(255,255,255,0.1)';\r\n        this.avatars.other.state = 'not-connected';\r\n    }\r\n\r\n    on_serverupdate_recieved_(data_)\r\n    {\r\n        //Lets clarify the information we have locally. One of the avatars is 'hosting' and\r\n        //the other is a joined in client, so we name these host and client for making sure\r\n        //the positions we get from the server are mapped onto the correct local sprites\r\n        let socket_host = this.avatars.self.host ? this.avatars.self : this.avatars.other;\r\n        let socket_client = this.avatars.self.host ? this.avatars.other : this.avatars.self;\r\n        let this_avatar = this.avatars.self;\r\n\r\n        //Store the server time (this is offset by the latency in the network, by the time we get it)\r\n        this.server_time = data_.t;\r\n        //Update our local offset time from the last server update\r\n        this.client_time = this.server_time - this.net_offset / 1000;\r\n\r\n        //One approach is to set the position directly as the server tells you.\r\n        //This is a common mistake and causes somewhat playable results on a local LAN, for example,\r\n        //but causes terrible lag when any ping/latency is introduced. The avatar can not deduce any\r\n        //information to interpolate with so it misses positions, and packet loss destroys this approach\r\n        //even more so. See 'the bouncing ball problem' on Wikipedia.\r\n        if (this.naive_approach)\r\n        {\r\n            if (data_.hp) { socket_host.pos = cm.new_pos(data_.hp); }\r\n            if (data_.cp) { socket_client.pos = cm.new_pos(data_.cp); }\r\n            return;\r\n        }\r\n\r\n        //Cache the data from the server,\r\n        //and then play the timeline\r\n        //back to the avatar with a small delay (net_offset), allowing\r\n        //interpolation between the points.\r\n        this.server_updates.push(data_);\r\n\r\n        //we limit the buffer in seconds worth of updates\r\n        //60fps*buffer seconds = number of samples\r\n        if (this.server_updates.length >= 60 * this.buffer_size)\r\n        { this.server_updates.splice(0, 1); }\r\n\r\n        //We can see when the last tick we know of happened.\r\n        //If client_time gets behind this due to latency, a snap occurs\r\n        //to the last tick. Unavoidable, and a reallly bad connection here.\r\n        //If that happens it might be best to drop the session after a period of time.\r\n        this.oldest_tick = this.server_updates[0].t;\r\n\r\n        //Handle the latest positions from the server\r\n        //and make sure to correct our local predictions, making the server have final say.\r\n        this.process_net_prediction_correction_();\r\n    }\r\n\r\n    on_connected_(data_)\r\n    {\r\n        //The server responded that we are now in a session,\r\n        //this lets us store the information about ourselves and set the colors\r\n        //to show we are now ready to be playing.\r\n        this.avatars.self.id = data_.id;\r\n        this.avatars.self.info_color = '#cc0000';\r\n        this.avatars.self.state = 'connected';\r\n        this.avatars.self.online = true;\r\n    }\r\n\r\n    on_netmessage_(data_)\r\n    {\r\n        let commands = data_.split('.');\r\n        let command = commands[0];\r\n        let subcommand = commands[1] || null;\r\n        let commanddata = commands[2] || null;\r\n\r\n        switch (command) {\r\n        case 's':\r\n            //server message\r\n            switch (subcommand) {\r\n            case 'h': //host a session requested\r\n                this.session.on_host_session(commanddata); break;\r\n            case 'j': //join a session requested\r\n                this.session.on_join_session(commanddata); break;\r\n            case 'r': //ready a session requested\r\n                this.session.on_ready_session(commanddata); break;\r\n            case 'e': //end session requested\r\n                this.on_disconnect_(commanddata); break;\r\n            case 'p': //server ping\r\n                this.session.on_ping(commanddata); break;\r\n            case 'c': //other avatar changed colors\r\n                this.session.on_otherclientcolorchange(commanddata); break;\r\n            } //subcommand\r\n            break; //'s'\r\n        } //command\r\n    }\r\n\r\n    connect_to_server_()\r\n    {\r\n        //Store a local reference to our connection to the server\r\n        this.socket = io.connect();\r\n\r\n        //When we connect, we are not 'connected' until we have a server id\r\n        //and are placed in a session by the server. The server sends us a message for that.\r\n        this.socket.on('connect', () => { this.avatars.self.state = 'connecting'; });\r\n\r\n        this.session = new ClSession(this.socket, this.avatars, this.ghosts);\r\n\r\n        //Sent when we are disconnected (network, server down, etc)\r\n        this.socket.on('disconnect', this.on_disconnect_.bind(this));\r\n        //Sent each tick of the server simulation. This is our authoritive update\r\n        this.socket.on('onserverupdate', this.on_serverupdate_recieved_.bind(this));\r\n        //Handle when we connect to the server, showing state and storing id's.\r\n        this.socket.on('onconnected', this.on_connected_.bind(this));\r\n        //On error we just show that we are not connected for now. Can print the data.\r\n        this.socket.on('error', this.on_disconnect_.bind(this));\r\n        //On message from the server, we parse the commands and send it to the handlers\r\n        this.socket.on('message', this.on_netmessage_.bind(this));\r\n    }\r\n}\r\n\r\n// http://paulirish.com/2011/requestanimationframe-for-smart-animating/\r\n// http://my.opera.com/emoller/blog/2011/12/20/requestanimationframe-for-smart-er-animating\r\n\r\n// requestAnimationFrame polyfill by Erik Möller\r\n// fixes from Paul Irish and Tino Zijdel\r\n\r\nwindow.onload = function () {\r\n    let frame_time = 60 / 1000; // run the local session at 16ms/ 60hz\r\n    let cl_last_time = 0;\r\n    let vendors = ['ms', 'moz', 'webkit', 'o'];\r\n\r\n    for (let x = 0; x < vendors.length && !window.requestAnimationFrame; ++x)\r\n    {\r\n        window.requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame'];\r\n        window.cancelAnimationFrame = window[vendors[x] + 'CancelAnimationFrame']\r\n            || window[vendors[x] + 'CancelRequestAnimationFrame'];\r\n    }\r\n\r\n    if (!window.requestAnimationFrame)\r\n    {\r\n        window.requestAnimationFrame = ((cb_, el_) => {\r\n            let currTime = Date.now(),\r\n                timeToCall = Math.max(0, frame_time - (currTime - cl_last_time));\r\n            let id = window.setTimeout(() => { cb_(currTime + timeToCall); }, timeToCall);\r\n            cl_last_time = currTime + timeToCall;\r\n            return id;\r\n        });\r\n    }\r\n\r\n    if (!window.cancelAnimationFrame)\r\n    { window.cancelAnimationFrame = ((id) => { clearTimeout(id); }); }\r\n\r\n    // Create our client instance.\r\n    let client = new ClPresenter();\r\n    client.init(document.getElementById('viewport'));\r\n};\r\n\r\n"]}