{"version":3,"sources":["dist/app.es6.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;;AAEb,MAAM,CAAC,SAAS,CAAC,KAAK,GAAG,UAAS,EAAE,EAAE;AAAE,MAAE,GAAG,EAAE,IAAI,CAAC,CAAC,AAAC,OAAO,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC;CAAE,CAAC;;IAEvF,MAAM;AAEG,aAFT,MAAM,GAGR;8BAHE,MAAM;;;AAKJ,YAAI,CAAC,WAAW,GAAG,GAAG,CAAC;AACvB,YAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;AACtB,YAAI,CAAC,KAAK,GAAG,EAAE,KAAK,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC;KAC5C;;;;;;;iBARC,MAAM;;eAcO,yBAAC,KAAK,EACrB;AACI,gBAAI,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,UAAU,CAAC,KAAK,IAAI,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,UAAU,CAAC,KAAK,EAChF;AACI,qBAAK,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,EAAE,KAAK,CAAC,UAAU,CAAC,KAAK,CAAC,EAC7C,KAAK,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;aAClD;AACD,gBAAI,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,UAAU,CAAC,KAAK,IAAI,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,UAAU,CAAC,KAAK,EAChF;AACI,qBAAK,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,EAAE,KAAK,CAAC,UAAU,CAAC,KAAK,CAAC,EAC7C,KAAK,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;aAClD;;AAED,iBAAK,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;AACnC,iBAAK,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;SACtC;;;eAEY,uBAAC,OAAO,EACrB;;;AAGI,gBAAI,KAAK,GAAG,CAAC,CAAC;AACd,gBAAI,KAAK,GAAG,CAAC,CAAC;AACd,gBAAI,EAAE,GAAG,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC;AAC/B,gBAAI,EAAE;AACN;AACI,yBAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,EAAE,CAAC;AAC3B;;AAEI,4BAAI,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,OAAO,CAAC,cAAc,EAAE;AAAE,qCAAS;yBAAE;;AAElE,4BAAI,KAAK,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;AACrC,4BAAI,CAAC,GAAG,KAAK,CAAC,MAAM,CAAC;AACrB,6BAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC;AAC1B;AACI,gCAAI,GAAG,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;AACnB,gCAAI,GAAG,IAAI,GAAG,EAAE;AAAE,qCAAK,IAAI,CAAC,CAAC;6BAAE;AAC/B,gCAAI,GAAG,IAAI,GAAG,EAAE;AAAE,qCAAK,IAAI,CAAC,CAAC;6BAAE;AAC/B,gCAAI,GAAG,IAAI,GAAG,EAAE;AAAE,qCAAK,IAAI,CAAC,CAAC;6BAAE;AAC/B,gCAAI,GAAG,IAAI,GAAG,EAAE;AAAE,qCAAK,IAAI,CAAC,CAAC;6BAAE;yBAClC;qBACJ;iBACJ;;;AAGD,gBAAI,gBAAgB,GAAG,IAAI,CAAC,sCAAsC,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;AACjF,gBAAI,OAAO,CAAC,MAAM,CAAC,MAAM,EACzB;;AAEI,uBAAO,CAAC,eAAe,GAAG,OAAO,CAAC,MAAM,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC;AACtD,uBAAO,CAAC,cAAc,GAAG,OAAO,CAAC,MAAM,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;aACvD;;;AAGD,mBAAO,gBAAgB,CAAC;SAC3B;;;eAEqC,gDAAC,EAAE,EAAE,EAAE,EAC7C;;AAEI,mBAAO,EAAE,CAAC,EAAE,CAAC,EAAE,IAAI,IAAI,CAAC,WAAW,GAAG,KAAK,CAAA,CAAC,CAAE,KAAK,CAAC,CAAC,CAAC;AAC7C,iBAAC,EAAE,CAAC,EAAE,IAAI,IAAI,CAAC,WAAW,GAAG,KAAK,CAAA,CAAC,CAAE,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC;SAC5D;;;eAEiB,4BAAC,UAAU,EAC7B;;;;AAEI,gBAAI,CAAC,IAAI,GAAG,MAAM,CAAC;AACnB,gBAAI,CAAC,KAAK,GAAG,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,CAAC;;AAElC,gBAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;AACtB,gBAAI,CAAC,GAAG,GAAG,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,CAAC;AAChC,gBAAI,CAAC,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,CAAC;;;;AAIjC,uBAAW,CAAC,YAAM;AAAE,sBAAK,IAAI,GAAG,CAAC,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,GAAG,MAAK,KAAK,CAAA,GAAI,MAAM,CAAC;AACzD,sBAAK,KAAK,GAAG,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,CAAC;AAClC,0BAAU,CAAC,cAAc,CAAC,MAAK,IAAI,CAAC,CAAC;aAAE,EAC/C,EAAE,CAAC,CAAC;;;AAGhB,uBAAW,CAAC,YAAM;AAAE,sBAAK,GAAG,GAAG,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,GAAG,MAAK,IAAI,CAAC;AAC5C,sBAAK,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,CAAC;AACjC,sBAAK,WAAW,CAAC,MAAK,QAAQ,GAAG,MAAK,GAAG,GAAG,MAAM,CAAC,CAAC;aAAE,EAC9D,CAAC,CAAC,CAAC;SAClB;;;eAEU,qBAAC,EAAE,EAAE;AAAE,gBAAI,EAAE,EAAE;AAAE,oBAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;aAAC;SAAE;;;eACvC,uBAAG;AAAE,mBAAO,IAAI,CAAC,QAAQ,CAAC;SAAE;;;;;;;;;;eAShC,iBAAC,EAAE,EAAE;AAAE,mBAAO,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC;SAAE;;;;;eAEvC,eAAC,EAAE,EAAE,EAAE,EAAE;AAAE,mBAAO,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAA,CAAE,KAAK,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAA,CAAE,KAAK,EAAE,EAAE,CAAC;SAAE;;;;;eAE3E,eAAC,EAAE,EAAE,EAAE,EAAE;AAAE,mBAAO,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAA,CAAE,KAAK,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAA,CAAE,KAAK,EAAE,EAAE,CAAC;SAAE;;;;;eAEpE,sBAAC,EAAE,EAAE,EAAE,EAAE;AAAE,mBAAO,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,GAAG,EAAE,CAAA,CAAE,KAAK,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,GAAG,EAAE,CAAA,CAAE,KAAK,EAAE,EAAE,CAAC;SAAE;;;;;eAE/E,cAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE;AAAE,gBAAI,CAAC,GAAG,MAAM,CAAC,EAAE,CAAC,CAAC,AAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,AAAC,OAAO,CAAC,EAAE,GAAG,CAAC,IAAI,EAAE,GAAG,EAAE,CAAA,AAAC,CAAA,CAAE,KAAK,EAAE,CAAC;SAAE;;;;;eAEhH,gBAAC,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE;AAAE,mBAAO,EAAE,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC;SAAE;;;WA1H9F,MAAM;;;AA2HX,CAAC;;AAEF,IAAI,EAAE,GAAG,IAAI,MAAM,EAAE,CAAC;;;;;;;;;IAQhB,MAAM,GAEG,SAFT,MAAM,CAEI,OAAO,EACnB;0BAHE,MAAM;;;AAKJ,QAAI,CAAC,MAAM,GAAG,OAAO,CAAC;;;AAGtB,QAAI,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;AAC1B,QAAI,CAAC,IAAI,GAAG,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC;AAC3C,QAAI,CAAC,KAAK,GAAG,eAAe,CAAC;AAC7B,QAAI,CAAC,KAAK,GAAG,uBAAuB,CAAC;AACrC,QAAI,CAAC,UAAU,GAAG,uBAAuB,CAAC;AAC1C,QAAI,CAAC,EAAE,GAAG,EAAE,CAAC;;AAEb,QAAI,CAAC,SAAS,GAAG,EAAE,GAAG,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;AACzC,QAAI,CAAC,SAAS,GAAG,EAAE,GAAG,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;AACzC,QAAI,CAAC,UAAU,GAAG,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,CAAC;;AAEvC,QAAI,CAAC,MAAM,GAAG,EAAE,CAAC;;AAEjB,QAAI,CAAC,UAAU,GAAG,EAAE,KAAK,EAAE,IAAI,CAAC,IAAI,CAAC,EAAE;AACnB,aAAK,EAAE,EAAE,CAAC,KAAK,CAAC,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,EAAE;AACpC,aAAK,EAAE,IAAI,CAAC,IAAI,CAAC,EAAE;AACnB,aAAK,EAAE,EAAE,CAAC,KAAK,CAAC,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC;;;;AAI5D,QAAI,IAAI,CAAC,MAAM,EAAE;AAAE,YAAI,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC;KAAE,MAC5C;AAAE,YAAI,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC;KAAE;CAC1C;;AACJ,CAAC;;IAEI,OAAO;AAEE,aAFT,OAAO,GAGT;8BAHE,OAAO;KAIR;;iBAJC,OAAO;;eAMM,2BACf;AACI,gBAAI,MAAM,GAAG,IAAI,MAAM,EAAE,CAAC;AAC1B,kBAAM,CAAC,UAAU,GAAG,CAAC,CAAC;;AAEtB,mBAAO,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;SACjC;;;WAZC,OAAO;;;AAaZ,CAAC;;IAEI,SAAS;AAEA,aAFT,SAAS,CAEC,OAAO,EACnB;8BAHE,SAAS;;AAIP,YAAI,IAAI,GAAG,OAAO,CAAC,WAAW,CAAC,CAAC;;AAEhC,YAAI,CAAC,EAAE,GAAG,IAAI,EAAE,CAAC;AACjB,YAAI,CAAC,WAAW,GAAI,OAAO,CAAC;AAC5B,YAAI,CAAC,aAAa,GAAI,IAAI,CAAC;AAC3B,YAAI,CAAC,YAAY,GAAI,CAAC,CAAC;;AAEvB,YAAI,CAAC,WAAW,GAAG,EAAE,CAAC;AACtB,YAAI,CAAC,WAAW,GAAG,CAAC,CAAC;AACrB,YAAI,CAAC,SAAS,GAAG,CAAC,CAAC;AACnB,YAAI,CAAC,SAAS,GAAG,EAAE,CAAC;;;AAGpB,YAAI,MAAM,GAAG,IAAI,OAAO,EAAE,CAAC;AAC3B,cAAM,CAAC,eAAe,EAAE,CAAC;;;;AAIzB,YAAI,CAAC,OAAO,GAAG,EAAE,IAAI,EAAE,IAAI,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC;AAClC,iBAAK,EAAE,IAAI,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,EAAE,CAAC;AACzD,YAAI,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC;AACzC,UAAE,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC;KAC/B;;;;iBA1BC,SAAS;;eA6BL,gBAAC,EAAE,EACT;;;;;AAGI,gBAAI,CAAC,WAAW,GAAG,EAAE,CAAC,WAAW,EAAE,CAAC;;;AAGpC,gBAAI,CAAC,SAAS,GAAG,EAAE,EAAE,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG;AACzB,kBAAE,EAAE,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG;AAC1B,mBAAG,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,cAAc;AACrC,mBAAG,EAAE,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,cAAc;AACtC,iBAAC,EAAE,IAAI,CAAC,WAAW,EAAE,CAAC;;;AAGzC,gBAAI,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,EAAE;AAAE,oBAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,gBAAgB,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;aAAE;;AAElG,gBAAI,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,MAAM,EAAE;AAAE,oBAAI,CAAC,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,gBAAgB,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;aAAE;;AAEpG,gBAAI,QAAQ,GAAG,IAAI,CAAC,GAAG,EAAE;gBACrB,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,WAAW,IAAI,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAA,AAAC,CAAC,CAAC;;;AAG7E,gBAAI,CAAC,QAAQ,GAAG,UAAU,CAAC,YAAM;AAAE,uBAAK,MAAM,CAAC,QAAQ,GAAG,UAAU,CAAC,CAAC;aAAE,EAAE,UAAU,CAAC,CAAC;AACtF,gBAAI,CAAC,SAAS,GAAG,QAAQ,GAAG,UAAU,CAAC;SAC1C;;;eAEU,uBAAG;AAAE,wBAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;SAAE;;;;;eAGhC,wBAAC,IAAI,EACnB;;AAEI,gBAAI,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,GAAG,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AACpE,gBAAI,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,GAAG,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,EAC/B,EAAE,CAAC,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;;;AAGtE,gBAAI,CAAC,OAAO,CAAC,KAAK,CAAC,SAAS,CAAC,GAAG,GAAG,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;AACtE,gBAAI,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,GAAG,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,SAAS,CAAC,GAAG,EAChC,EAAE,CAAC,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC;;;AAGxE,cAAE,CAAC,eAAe,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;AACtC,cAAE,CAAC,eAAe,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;;AAEvC,gBAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;AAC9B,gBAAI,CAAC,OAAO,CAAC,KAAK,CAAC,MAAM,GAAG,EAAE,CAAC;SAClC;;;eAEW,sBAAC,OAAO,EAAE,MAAM,EAAE,WAAW,EAAE,UAAU,EACrD;;AAEI,gBAAI,aAAa,GAAG,OAAO,CAAC,MAAM,IAAI,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC;;AAE/G,yBAAa,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,WAAW,EAAE,GAAG,EAAE,UAAU,EAAE,CAAC,CAAC;SACrF;;;WApFC,SAAS;;;IAuFT,WAAW;AAEF,aAFT,WAAW,GAGb;8BAHE,WAAW;;;AAKT,YAAI,CAAC,YAAY,GAAG,CAAC,CAAC;AACtB,YAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;AACnB,YAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;AACnB,YAAI,CAAC,aAAa,GAAG,CAAC,CAAC;AACvB,YAAI,CAAC,OAAO,GAAG,KAAK,CAAC;AACrB,YAAI,CAAC,KAAK,GAAG,IAAI,CAAC;;;AAGlB,YAAI,CAAC,KAAK,GAAG,IAAI,OAAO,EAAE,CAAC;KAC9B;;iBAdC,WAAW;;eAgBH,sBACV;;;AACI,gBAAI,IAAI,GAAG,OAAO,CAAC,GAAG,CAAC,IAAI,IAAI,IAAI;gBAC/B,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC;gBAC5B,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC;gBACtB,GAAG,GAAG,OAAO,EAAE,CAAC;AACpB,gBAAI,CAAC,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;;;;;;;;;;AAUpC,gBAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;;;AAGxB,mBAAO,CAAC,GAAG,CAAC,qCAAqC,GAAG,IAAI,CAAC,CAAC;;;AAG1D,eAAG,CAAC,GAAG,CAAC,GAAG,EAAE,UAAC,IAAI,EAAE,IAAI,EAAK;AACzB,uBAAO,CAAC,GAAG,CAAC,mBAAmB,EAAE,SAAS,GAAG,aAAa,CAAC,CAAC;;AAE5D,oBAAI,OAAO,GAAG,EAAE,IAAI,EAAE,SAAS;AACf,4BAAQ,EAAE,MAAM;AAChB,2BAAO,EAAE,EAAE,aAAa,EAAE,IAAI,CAAC,GAAG,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE,EAAE,CAAC;;AAEzE,oBAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,OAAO,EAAE,UAAC,IAAI,EAAK;AAC5C,wBAAI,IAAI,EACR;AACI,+BAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;AAClB,4BAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC;qBAClC,MACI,mCAAqC,CAAC;iBAC9C,CAAC,CAAC;aACN,CAAC,CAAC;;;AAGH,eAAG,CAAC,GAAG,CAAC,QAAQ,EAAE,UAAC,IAAI,EAAE,IAAI,EAAE,KAAK,EAAK;AACrC,oBAAI,OAAK,OAAO,EAAE;AAAE,2BAAO,CAAC,GAAG,CAAC,0CAA0C,CAAC,CAAC;iBAAE;AAC9E,oBAAI,CAAC,IAAI,CAAC,OAAK,KAAK,CAAC,eAAe,EAAE,CAAC,CAAC;aAC3C,CAAC,CAAC;;;;;AAKH,eAAG,CAAC,GAAG,CAAC,IAAI,EAAE,UAAC,IAAI,EAAE,IAAI,EAAE,KAAK,EAAK;;;;;;AAMjC,oBAAI,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;;AAErB,oBAAI,OAAK,OAAO,EAAE;AAAE,2BAAO,CAAC,GAAG,CAAC,oCAAoC,GAAG,IAAI,CAAC,CAAC;iBAAE;AAC/E,oBAAI,OAAO,GAAG,EAAE,IAAI,EAAE,SAAS,GAAG,GAAG;AACrB,4BAAQ,EAAE,MAAM;AAChB,2BAAO,EAAE,EAAE,aAAa,EAAE,IAAI,CAAC,GAAG,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE,EAAE,CAAC;;AAEzE,oBAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,OAAO,EAAE,UAAC,IAAI,EAAK;AACnC,wBAAI,IAAI,EACR;AACI,+BAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;AAClB,4BAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC;qBAClC,MACI;AAAE,+BAAO,CAAC,GAAG,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;qBAAE;iBAAE,CAAC,CAAC;aAC/C,CAAC,CAAC;SACN;;;eAEU,uBACX;;;;;;;;;AAOI,gBAAI,EAAE,GAAG,OAAO,CAAC,WAAW,CAAC,CAAC;AAC9B,gBAAI,GAAG,GAAG,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;;;;AAIhC,eAAG,CAAC,GAAG,CAAC,UAAC,OAAO,EAAE,KAAK,EAAK;AAAE,oBAAI,SAAS,GAAG,OAAO,CAAC,OAAO,CAAC;AAChC,qBAAK,EAAE,CAAC;aAAE,CAAC,CAAC;;;;;;;;;;AAU1C,gBAAI,IAAI,GAAG,OAAO,CAAC,WAAW,CAAC,CAAC;AAChC,eAAG,CAAC,OAAO,CAAC,EAAE,CAAC,YAAY,EAAE,UAAC,OAAO,EAAK;;;;AAItC,uBAAO,CAAC,MAAM,GAAG,IAAI,EAAE,CAAC;;;AAGxB,uBAAO,CAAC,IAAI,CAAC,aAAa,EAAE,EAAE,EAAE,EAAE,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC;;;;AAIpD,uBAAK,aAAa,CAAC,OAAO,CAAC,CAAC;;;AAG5B,uBAAO,CAAC,GAAG,CAAC,wBAAwB,GAAG,OAAO,CAAC,MAAM,GAAG,YAAY,CAAC,CAAC;;;;AAItE,uBAAO,CAAC,EAAE,CAAC,SAAS,EAAE,UAAC,EAAE,EAAK;AAAE,2BAAK,WAAW,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;iBAAE,CAAC,CAAC;;;;;AAKlE,uBAAO,CAAC,EAAE,CAAC,YAAY,EAAE,YAAM;;AAE3B,2BAAO,CAAC,GAAG,CAAC,qCAAqC,GAAG,OAAO,CAAC,MAAM,GAAG,GAAG,GAAG,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;;;AAG/F,wBAAI,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,EACjC;;AAEI,+BAAK,YAAY,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC;qBACzD;iBACJ,CAAC,CAAC;aACN,CAAC,CAAC;SACN;;;eAEG,gBAAG;AAAE,gBAAI,IAAI,CAAC,OAAO,EAAE;AAAE,uBAAO,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;aAAE;SAAE;;;eAEzD,qBAAC,OAAO,EAAE,QAAQ,EAC7B;;;AACI,gBAAI,IAAI,CAAC,YAAY,IAAI,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,GAAG,EACnE;;AAEI,oBAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAE,CAAC,CAAC;AAC3D,0BAAU,CAAC,YAAM;AACb,wBAAI,OAAK,QAAQ,CAAC,MAAM,EACxB;AACI,+BAAK,aAAa,CAAC,OAAK,QAAQ,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,OAAK,QAAQ,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC;AACtE,+BAAK,QAAQ,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;qBAC9B;iBACJ,EACU,IAAI,CAAC,YAAY,CAAC,CAAC;AAC9B,uBAAO;aACV;AACD,gBAAI,CAAC,aAAa,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;SACzC;;;eAEY,uBAAC,OAAO,EAAE,QAAQ,EAC/B;;AAEI,gBAAI,aAAa,GAAG,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;;AAExC,gBAAI,YAAY,GAAG,aAAa,CAAC,CAAC,CAAC,CAAC;;AAEpC,gBAAI,YAAY,GAAG,IAAI,CAAC;AACxB,gBAAI,OAAO,CAAC,OAAO,CAAC,WAAW,CAAC,MAAM,IAAI,OAAO,CAAC,MAAM,EACxD;AAAE,4BAAY,GAAG,OAAO,CAAC,OAAO,CAAC,aAAa,CAAC;aAAE,MAC5C;AAAE,4BAAY,GAAG,OAAO,CAAC,OAAO,CAAC,WAAW,CAAC;aAAE;;AAEpD,oBAAQ,YAAY;AAEpB,qBAAK,GAAG;AAAE,wBAAI,CAAC,SAAS,CAAC,OAAO,EAAE,aAAa,CAAC,CAAC,AAAC,MAAM;AACxD,qBAAK,GAAG;AAAE,2BAAO,CAAC,IAAI,CAAC,MAAM,GAAG,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC,AAAC,MAAM;AAAA,AACzD,qBAAK,GAAG;AAAE,wBAAI,YAAY,EAAE;AAAE,oCAAY,CAAC,IAAI,CAAC,MAAM,GAAG,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC;qBAAE,AAAC,MAAM;AACpF,qBAAK,GAAG;AAAE,wBAAI,CAAC,YAAY,GAAG,UAAU,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC,AAAC,MAAM;aACjE;SACJ;;;eAEQ,mBAAC,OAAO,EAAE,MAAM,EACzB;;;;AAII,gBAAI,cAAc,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;AAC1C,gBAAI,UAAU,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;AAC7C,gBAAI,SAAS,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;;;;AAI1B,gBAAI,OAAO,IAAI,OAAO,CAAC,OAAO,EAC9B;AAAE,uBAAO,CAAC,OAAO,CAAC,YAAY,CAAC,OAAO,EAAE,cAAc,EAAE,UAAU,EAAE,SAAS,CAAC,CAAC;aAAE;SACpF;;;eAEc,yBAAC,OAAO,EACvB;;;AAGI,gBAAI,OAAO,GAAG,IAAI,SAAS,CAAC,OAAO,CAAC,CAAC;;;AAGrC,gBAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC;;AAEpC,gBAAI,CAAC,aAAa,EAAE,CAAC;;;AAGrB,mBAAO,CAAC,MAAM,CAAC,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,CAAC,CAAC;;;AAGrC,mBAAO,CAAC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,EAAE,CAAC,WAAW,EAAE,CAAC,CAAC,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;AAClE,mBAAO,CAAC,GAAG,CAAC,kBAAkB,GAAG,EAAE,CAAC,WAAW,EAAE,CAAC,CAAC;AACnD,mBAAO,CAAC,OAAO,GAAG,OAAO,CAAC;AAC1B,mBAAO,CAAC,OAAO,GAAG,IAAI,CAAC;AACvB,gBAAI,CAAC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,MAAM,GAAG,6BAA6B,GAAG,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;;AAEzF,mBAAO,OAAO,CAAC;SAClB;;;eAEW,sBAAC,WAAW,EAAE,QAAQ,EAClC;AACI,gBAAI,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;AACzC,gBAAI,CAAC,OAAO,EAAE;AAAE,oBAAI,CAAC,IAAI,CAAC,6BAA6B,CAAC,CAAC,AAAC,OAAO;aAAE;;;AAGnE,mBAAO,CAAC,WAAW,EAAE,CAAC;;AAEtB,gBAAI,OAAO,CAAC,YAAY,GAAG,CAAC,EAC5B;;AAEI,oBAAI,QAAQ,IAAI,OAAO,CAAC,WAAW,CAAC,MAAM,EAC1C;;AAEI,wBAAI,OAAO,CAAC,aAAa,EACzB;;AAEI,+BAAO,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;;AAElC,4BAAI,CAAC,aAAa,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;qBAC7C;iBACJ,MAED;;AAEI,wBAAI,OAAO,CAAC,WAAW,EACvB;;AAEI,+BAAO,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;;AAEhC,+BAAO,CAAC,WAAW,CAAC,OAAO,GAAG,KAAK,CAAC;;AAEpC,4BAAI,CAAC,aAAa,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;qBAC3C;iBACJ;aACJ;AACD,mBAAO,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;AAClC,gBAAI,CAAC,aAAa,EAAE,CAAC;AACrB,gBAAI,CAAC,IAAI,CAAC,iCAAiC,GAAG,IAAI,CAAC,aAAa,GAAG,WAAW,CAAC,CAAC;SACnF;;;eAEa,wBAAC,QAAQ,EACvB;;;;;AAKI,oBAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,MAAM,GAAG,QAAQ,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;AAClE,oBAAQ,CAAC,aAAa,CAAC,OAAO,GAAG,QAAQ,CAAC;;;;AAI1C,oBAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,EAAE,CAAC,WAAW,EAAE,CAAC,CAAC,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;AACjF,oBAAQ,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,EAAE,CAAC,WAAW,EAAE,CAAC,CAAC,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;;;AAG/E,oBAAQ,CAAC,MAAM,GAAG,IAAI,CAAC;SAC1B;;;eAEY,uBAAC,OAAO,EACrB;AACI,gBAAI,CAAC,IAAI,CAAC,mCAAmC,GAAG,IAAI,CAAC,aAAa,CAAC,CAAC;;AAEpE,gBAAI,CAAC,IAAI,CAAC,aAAa,EAAE;AAAE,oBAAI,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC,AAAC,OAAO;aAAE;;;;AAInE,gBAAI,gBAAgB,GAAG,KAAK,CAAC;;AAE7B,iBAAK,IAAI,SAAS,IAAI,IAAI,CAAC,QAAQ;AACnC;;AAEI,oBAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,SAAS,CAAC,EAAE;AAAE,6BAAS;iBAAE;;AAE3D,oBAAI,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;;;AAGvC,oBAAI,OAAO,CAAC,YAAY,GAAG,CAAC;AAC5B;;AAEI,wCAAgB,GAAG,IAAI,CAAC;;;AAGxB,+BAAO,CAAC,aAAa,GAAG,OAAO,CAAC;AAChC,+BAAO,CAAC,OAAO,CAAC,KAAK,CAAC,MAAM,GAAG,OAAO,CAAC;AACvC,+BAAO,CAAC,YAAY,EAAE,CAAC;;;;AAIvB,4BAAI,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;qBAChC;aACJ;;;;AAID,gBAAI,CAAC,gBAAgB,EAAE;AAAE,oBAAI,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;aAAE;SAC5D;;;WAtUC,WAAW;;;AAuUhB,CAAC;;;AAGF,IAAI,MAAM,GAAG,IAAI,WAAW,EAAE,CAAC;AAC/B,MAAM,CAAC,UAAU,EAAE,CAAC;AACpB,MAAM,CAAC,WAAW,EAAE,CAAC","file":"dist/app.es6.js","sourcesContent":["'use strict';\r\n// (4.22208334636).fixed(n) will return fixed point value to n places, default n = 3\r\nNumber.prototype.fixed = function(n_) { n_ = n_ || 3; return parseFloat(this.toFixed(n_)); };\r\n\r\nclass Common\r\n{\r\n    constructor()\r\n    {\r\n        //The speed at which the clients move.\r\n        this.avatarspeed = 120;\r\n        this.owntime_ = 0.016;\r\n        this.world = { width: 720, height: 480 };\r\n    }\r\n\r\n    /*\r\n     Shared between server and client.\r\n     In this example, `item` is always of type avatar.\r\n     */\r\n    check_collision(item_)\r\n    {\r\n        if (item_.pos.x < item_.pos_limits.x_min || item_.pos.x > item_.pos_limits.x_max)\r\n        {\r\n            item_.pos.x = Math.min(Math.max(item_.pos.x, item_.pos_limits.x_min),\r\n                                   item_.pos_limits.x_max);\r\n        }\r\n        if (item_.pos.y < item_.pos_limits.y_min || item_.pos.y > item_.pos_limits.y_max)\r\n        {\r\n            item_.pos.y = Math.min(Math.max(item_.pos.y, item_.pos_limits.y_min),\r\n                                   item_.pos_limits.y_max);\r\n        }\r\n        //Fixed point helps be more deterministic\r\n        item_.pos.x = item_.pos.x.fixed(4);\r\n        item_.pos.y = item_.pos.y.fixed(4);\r\n    }\r\n\r\n    process_input(avatar_)\r\n    {\r\n        //It's possible to have recieved multiple inputs by now,\r\n        //so we process each one\r\n        let x_dir = 0;\r\n        let y_dir = 0;\r\n        let ic = avatar_.inputs.length;\r\n        if (ic) //if we have inputs\r\n        {\r\n            for (let j = 0; j < ic; ++j) //for each input command\r\n            {\r\n                //don't process ones we already have simulated locally\r\n                if (avatar_.inputs[j].seq <= avatar_.last_input_seq) { continue; }\r\n\r\n                let input = avatar_.inputs[j].inputs;\r\n                let c = input.length;\r\n                for (let i = 0; i < c; ++i) //for all input values\r\n                {\r\n                    let key = input[i];\r\n                    if (key == 'l') { x_dir -= 1; }\r\n                    if (key == 'r') { x_dir += 1; }\r\n                    if (key == 'd') { y_dir += 1; }\r\n                    if (key == 'u') { y_dir -= 1; }\r\n                }\r\n            }\r\n        }\r\n\r\n        //we have a direction vector now, so apply the same physics as the client\r\n        let resulting_vector = this.physics_movement_vector_from_direction(x_dir, y_dir);\r\n        if (avatar_.inputs.length)\r\n        {\r\n            //we can now clear the array since these have been processed\r\n            avatar_.last_input_time = avatar_.inputs[ic - 1].time;\r\n            avatar_.last_input_seq = avatar_.inputs[ic - 1].seq;\r\n        }\r\n\r\n        //give it back\r\n        return resulting_vector;\r\n    }\r\n\r\n    physics_movement_vector_from_direction(x_, y_)\r\n    {\r\n        //Must be fixed step, at physics sync speed.\r\n        return { x: (x_ * (this.avatarspeed * 0.015)).fixed(3),\r\n                 y: (y_ * (this.avatarspeed * 0.015)).fixed(3) };\r\n    }\r\n\r\n    start_physics_loop(component_)\r\n    {\r\n        //Set up some physics integration values\r\n        this._pdt = 0.0001; //The physics update delta time\r\n        this._pdte = new Date().getTime(); //The physics update last delta time\r\n        //A local timer for precision on server and client\r\n        this.owntime_ = 0.016; //The local timer\r\n        this._dt = new Date().getTime(); //The local timer delta\r\n        this._dte = new Date().getTime(); //The local timer last frame time\r\n\r\n        //Start a physics loop, this is separate to the rendering\r\n        //as this happens at a fixed frequency\r\n        setInterval(() => { this._pdt = (new Date().getTime() - this._pdte) / 1000.0;\r\n                            this._pdte = new Date().getTime();\r\n                            component_.update_physics(this._pdt); },\r\n                    15);\r\n\r\n        //Start a fast paced timer for measuring time easier\r\n        setInterval(() => { this._dt = new Date().getTime() - this._dte;\r\n                            this._dte = new Date().getTime();\r\n                            this.set_owntime(this.owntime_ + this._dt / 1000.0); },\r\n                    4);\r\n    }\r\n\r\n    set_owntime(v_) { if (v_) { this.owntime_ = v_;} }\r\n    get_owntime() { return this.owntime_; }\r\n\r\n    /*\r\n     Helper functions for the session code\r\n\r\n     Here we have some common maths and session related code to make working with 2d vectors easy,\r\n     as well as some helpers for rounding numbers to fixed point.\r\n     */\r\n    //copies a 2d vector like object from one to another\r\n    new_pos(a_) { return { x: a_.x, y: a_.y }; }\r\n    //Add a 2d vector with another one and return the resulting vector\r\n    v_add(a_, b_) { return { x: (a_.x + b_.x).fixed(), y: (a_.y + b_.y).fixed() }; }\r\n    //Subtract a 2d vector with another one and return the resulting vector\r\n    v_sub(a_, b_) { return { x: (a_.x - b_.x).fixed(), y: (a_.y - b_.y).fixed() }; }\r\n    //Multiply a 2d vector with a scalar value and return the resulting vector\r\n    v_mul_scalar(a_, b_) { return { x: (a_.x * b_).fixed(), y: (a_.y * b_).fixed() }; }\r\n    //Simple linear interpolation\r\n    lerp(p_, n_, t_) { let t = Number(t_); t = Math.max(0, Math.min(1, t)).fixed(); return (p_ + t * (n_ - p_)).fixed(); }\r\n    //Simple linear interpolation between 2 vectors\r\n    v_lerp(v_, tv_, t_) { return { x: this.lerp(v_.x, tv_.x, t_), y: this.lerp(v_.y, tv_.y, t_) }; }\r\n};\r\n\r\nlet cm = new Common();\r\n\r\n// http://stackoverflow.com/questions/30339675/how-to-map-json-data-to-a-class\r\n\r\n/*\r\n The avatar class\r\n A simple class to maintain state of a avatar on screen.\r\n*/\r\nclass Avatar\r\n{\r\n    constructor(socket_)\r\n    {\r\n        //Store the instance, if any\r\n        this.socket = socket_;\r\n\r\n        //Set up initial values for our state information\r\n        this.pos = { x: 0, y: 0 };\r\n        this.size = { x: 16, y: 16, hx: 8, hy: 8 };\r\n        this.state = 'not-connected';\r\n        this.color = 'rgba(255,255,255,0.1)';\r\n        this.info_color = 'rgba(255,255,255,0.1)';\r\n        this.id = '';\r\n        //These are used in moving us around later\r\n        this.old_state = { pos: { x: 0, y: 0 } };\r\n        this.cur_state = { pos: { x: 0, y: 0 } };\r\n        this.state_time = new Date().getTime();\r\n        //Our local history of inputs\r\n        this.inputs = [];\r\n        //The world bounds we are confined to\r\n        this.pos_limits = { x_min: this.size.hx,\r\n                            x_max: cm.world.width - this.size.hx,\r\n                            y_min: this.size.hy,\r\n                            y_max: cm.world.height - this.size.hy };\r\n        //The 'host' of a session gets created with a avatar instance since\r\n        //the server already knows who they are. If the server starts a session\r\n        //with only a host, the other avatar is set up in the 'else' below\r\n        if (this.socket) { this.pos = { x: 20, y: 20 }; }\r\n        else { this.pos = { x: 500, y: 200 }; }\r\n    }\r\n};\r\n\r\nclass SvModel\r\n{\r\n    constructor()\r\n    {\r\n    }\r\n\r\n    get_avatar_json()\r\n    {\r\n        let avatar = new Avatar();\r\n        avatar.state_time = 0;\r\n\r\n        return JSON.stringify(avatar);\r\n    }\r\n};\r\n\r\nclass SvSession\n{\n    constructor(socket_)\n    {\n        let UUID = require('node-uuid');\n\n        this.id = UUID(); // generate a new id for the session\n        this.socket_host =  socket_; // so we know who initiated the session\n        this.socket_client =  null; // nobody else joined yet, since its new\n        this.avatar_count =  1;\n\n        this.frame_time_ = 45; //on server we run at 45ms, 22hz\n        this.server_time = 0;\n        this.last_time = 0;\n        this.laststate = {};\n\n        // Model distribution\n        let sv_mdl = new SvModel();\n        sv_mdl.get_avatar_json();\n\n        //We create a avatar set, passing them\n        //the session that is running them, as well\n        this.avatars = { self: new Avatar(this.socket_host),\n                         other: new Avatar(this.socket_client) };\n        this.avatars.self.pos = { x: 20, y: 20 };\n        cm.start_physics_loop(this);\n    }\n\n    //Main update loop\n    update(t_)\n    {\n        //Update the session specifics\n        //Update the state of our local clock to match the timer\n        this.server_time = cm.get_owntime();\n\n        //Make a snapshot of the current state, for updating the clients\n        this.laststate = { hp: this.avatars.self.pos, //'host position', the session creators position\n                           cp: this.avatars.other.pos, //'client position', the person that joined, their position\n                           his: this.avatars.self.last_input_seq, //'host input sequence', the last input we processed for the host\n                           cis: this.avatars.other.last_input_seq, //'client input sequence', the last input we processed for the client\n                           t: this.server_time }; // our current local time on the server\n\n        //Send the snapshot to the 'host' avatar\n        if (this.avatars.self.socket) { this.avatars.self.socket.emit('onserverupdate', this.laststate); }\n        //Send the snapshot to the 'client' avatar\n        if (this.avatars.other.socket) { this.avatars.other.socket.emit('onserverupdate', this.laststate); }\n\n        let currTime = Date.now(),\n            timeToCall = Math.max(0, this.frame_time_ - (currTime - this.last_time));\n\n        //schedule the next update\n        this.updateid = setTimeout(() => { this.update(currTime + timeToCall); }, timeToCall);\n        this.last_time = currTime + timeToCall;\n    }\n\n    stop_update() { clearTimeout(this.updateid); }\n\n    //Updated at 15ms , simulates the world state\n    update_physics(pdt_)\n    {\n        //Handle avatar one\n        this.avatars.self.old_state.pos = cm.new_pos(this.avatars.self.pos);\n        this.avatars.self.pos = cm.v_add(this.avatars.self.old_state.pos,\n                                         cm.process_input(this.avatars.self));\n\n        //Handle avatar two\n        this.avatars.other.old_state.pos = cm.new_pos(this.avatars.other.pos);\n        this.avatars.other.pos = cm.v_add(this.avatars.other.old_state.pos,\n                                          cm.process_input(this.avatars.other));\n\n        //Keep the physics position in the world\n        cm.check_collision(this.avatars.self);\n        cm.check_collision(this.avatars.other);\n\n        this.avatars.self.inputs = []; //we have cleared the input buffer, so remove this\n        this.avatars.other.inputs = []; //we have cleared the input buffer, so remove this\n    }\n\n    handle_input(client_, input_, input_time_, input_seq_)\n    {\n        //Fetch which client this refers to out of the two\n        let socket_client = client_.userid == this.avatars.self.socket.userid ? this.avatars.self : this.avatars.other;\n        //Store the input on the avatar instance for processing in the physics loop\n        socket_client.inputs.push({ inputs: input_, time: input_time_, seq: input_seq_ });\n    }\n}\n\r\nclass SvPresenter\n{\n    constructor()\n    {\n        //a local queue of messages we delay if faking latency\n        this.fake_latency = 0;\n        this.messages = [];\n        this.sessions = [];\n        this.session_count = 0;\n        this.verbose = false;\n        this.httpd = null;\n\n        // Model definition\n        this.model = new SvModel();\n    }\n\n    init_httpd()\n    {\n        let port = process.env.PORT || 4004,\n            express = require('express'),\n            http = require('http'),\n            app = express();\n        this.httpd = http.createServer(app);\n\n        /* Express server set up. */\n\n        //The express server handles passing our content to the browser,\n        //As well as routing users where they need to go. This example is bare bones\n        //and will serve any file the user requests from the root of your web server (where you launch the script from)\n        //so keep this in mind - this is not a production script but a development teaching tool.\n\n        //Tell the server to listen for incoming connections\n        this.httpd.listen(port);\n\n        //Log something so we know that it succeeded.\n        console.log('\\t :: Express :: Listening on port ' + port);\n\n        // By default, we forward the / path to index.html automatically.\n        app.get('/', (req_, res_) => {\n            console.log('trying to load %s', __dirname + '/index.html');\n            // let file = req_.path;\n            let options = { root: __dirname,\n                            dotfiles: 'deny',\n                            headers: { 'x-timestamp': Date.now(), 'x-sent': true } };\n            // console.log(\"file = \", file);\n            res_.sendFile('/index.html', options, (err_) => {\n                if (err_)\n                {\n                    console.log(err_);\n                    res_.status(err_.status).end();\n                }\n                else { /* console.log('Sent:', file); */ };\n            });\n        });\n\n        // Model\n        app.get('/model', (req_, res_, next_) => {\n            if (this.verbose) { console.log('\\t :: Express :: data requested as model'); }\n            res_.json(this.model.get_avatar_json());\n        });\n\n        // This handler will listen for requests on /*, any file from the root of our server.\n        // See expressjs documentation for more info on routing.\n\n        app.get('/*', (req_, res_, next_) => {\n            //This is the current file they have requested\n            // let file = req.params[0];\n\n            //Send the requesting client the file.\n            // res.sendfile(__dirname + '/' + file);\n            let file = req_.path;\n            //For debugging, we can track what files are requested.\n            if (this.verbose) { console.log('\\t :: Express :: file requested : ' + file); }\n            let options = { root: __dirname + '/',\n                            dotfiles: 'deny',\n                            headers: { 'x-timestamp': Date.now(), 'x-sent': true } };\n            // console.log(\"file = \", file);\n            res_.sendFile(file, options, (err_) => {\n                if (err_)\n                {\n                    console.log(err_);\n                    res_.status(err_.status).end();\n                }\n                else { console.log('Sent:', file); } });\n        });\n    }\n\n    init_socket()\n    {\n        /* Socket.IO server set up. */\n\n        //Express and socket.io can work together to serve the socket.io client files for you.\n        //This way, when the client requests '/socket.io/' files, socket.io determines what the client needs.\n\n        //Create a socket.io instance using our express server\n        let io = require('socket.io');\n        let sio = io.listen(this.httpd);\n\n        //Configure the socket.io connection settings.\n        //See http://socket.io/\n        sio.use((socket_, next_) => { let handshake = socket_.request;\n                                      next_(); });\n\n        //Enter the session server code. The session server handles\n        //client connections looking for a session, creating sessions,\n        //leaving sessions, joining sessions and ending sessions when they leave.\n\n        //Socket.io will call this function when a client connects,\n        //So we can send that client looking for a session to play,\n        //as well as give that client a unique ID to use so we can\n        //maintain the list if avatars.\n        let UUID = require('node-uuid');\n        sio.sockets.on('connection', (socket_) => {\n            //Generate a new UUID, looks something like\n            //5b2ca132-64bd-4513-99da-90e838ca47d1\n            //and store this on their socket/connection\n            socket_.userid = UUID();\n\n            //tell the avatar they connected, giving them their id\n            socket_.emit('onconnected', { id: socket_.userid });\n\n            //now we can find them a session to play with someone.\n            //if no session exists with someone waiting, they create one and wait.\n            this.find_session_(socket_);\n\n            //Useful to know when someone connects\n            console.log('\\t socket.io:: socket ' + socket_.userid + ' connected');\n\n            //Now we want to handle some of the messages that clients will send.\n            //They send messages here, and we send them to the sv to handle.\n            socket_.on('message', (m_) => { this.on_message_(socket_, m_); });\n\n            //When this client disconnects, we want to tell the session server\n            //about that as well, so it can remove them from the session they are\n            //in, and make sure the other avatar knows that they left and so on.\n            socket_.on('disconnect', () => {\n                //Useful to know when soomeone disconnects\n                console.log('\\t socket.io:: client disconnected ' + socket_.userid + ' ' + socket_.session.id);\n                //If the client was in a session, set by sv.find_session_,\n                //we can tell the session server to update that session state.\n                if (socket_ && socket_.session.id)\n                {\n                    //avatar leaving a session should destroy that session\n                    this.end_session_(socket_.session.id, socket_.userid);\n                }\n            });\n        });\n    }\n\n    log_() { if (this.verbose) { console.log.apply(this, arguments); } }\n\n    on_message_(socket_, message_)\n    {\n        if (this.fake_latency && message_.split('.')[0].substr(0, 1) == 'i')\n        {\n            //store all input message\n            this.messages.push({ client: socket_, message: message_ });\n            setTimeout(() => {\n                if (this.messages.length)\n                {\n                    this.proc_message_(this.messages[0].client, this.messages[0].message);\n                    this.messages.splice(0, 1);\n                }\n            },\n                       this.fake_latency);\n            return;\n        }\n        this.proc_message_(socket_, message_);\n    }\n\n    proc_message_(socket_, message_)\n    {\n        //Cut the message up into sub components\n        let message_parts = message_.split('.');\n        //The first is always the type of message\n        let message_type = message_parts[0];\n\n        let other_client = null;\n        if (socket_.session.socket_host.userid == socket_.userid)\n        { other_client = socket_.session.socket_client; }\n        else { other_client = socket_.session.socket_host; }\n\n        switch (message_type)\n        {\n        case 'i': this.on_input_(socket_, message_parts); break;// Input handler will forward this\n        case 'p': socket_.send('s.p.' + message_parts[1]); break;\n        case 'c': if (other_client) { other_client.send('s.c.' + message_parts[1]); } break; // Client changed their color!\n        case 'l': this.fake_latency = parseFloat(message_parts[1]); break; // A client is asking for lag simulation\n        }\n    }\n\n    on_input_(socket_, parts_)\n    {\n        //The input commands come in like u-l,\n        //so we split them up into separate commands,\n        //and then update the avatars\n        let input_commands = parts_[1].split('-');\n        let input_time = parts_[2].replace('-', '.');\n        let input_seq = parts_[3];\n\n        //the client should be in a session, so\n        //we can tell that session to handle the input\n        if (socket_ && socket_.session)\n        { socket_.session.handle_input(socket_, input_commands, input_time, input_seq); }\n    }\n\n    create_session_(socket_)\n    {\n        //Create a new session instance, this actually runs the\n        //session code like collisions and such.\n        let session = new SvSession(socket_);\n\n        //Store it in the list of session\n        this.sessions[session.id] = session;\n        //Keep track\n        this.session_count++;\n\n        //Start updating the session loop on the server\n        session.update(new Date().getTime());\n        //tell the avatar that they are now the host\n        //s=server message, h=you are hosting\n        socket_.send('s.h.' + String(cm.get_owntime()).replace('.', '-'));\n        console.log('server host at  ' + cm.get_owntime());\n        socket_.session = session;\n        socket_.hosting = true;\n        this.log_('host ' + socket_.userid + ' created a session with id ' + socket_.session.id);\n        //return it\n        return session;\n    }\n\n    end_session_(session_id_, user_id_)\n    {\n        let session = this.sessions[session_id_];\n        if (!session) { this.log_('that session was not found!'); return; }\n\n        //stop the session updates immediate\n        session.stop_update();\n        //if the session has two avatars, the one is leaving\n        if (session.avatar_count > 1)\n        {\n            //send the avatars the message the session is ending\n            if (user_id_ == session.socket_host.userid)\n            {\n                //the host left, oh snap. Lets try join another session\n                if (session.socket_client)\n                {\n                    //tell them the session is over\n                    session.socket_client.send('s.e');\n                    //now look for/create a new session.\n                    this.find_session_(session.socket_client);\n                }\n            }\n            else\n            {\n                //the other avatar left, we were hosting\n                if (session.socket_host)\n                {\n                    //tell the client the session is ended\n                    session.socket_host.send('s.e');\n                    //i am no longer hosting, this session is going down\n                    session.socket_host.hosting = false;\n                    //now look for/create a new session.\n                    this.find_session_(session.socket_host);\n                }\n            }\n        }\n        delete this.sessions[session_id_];\n        this.session_count--;\n        this.log_('session removed. there are now ' + this.session_count + ' sessions');\n    }\n\n    start_session_(session_)\n    {\n        //right so a session has 2 avatars and wants to begin\n        //the host already knows they are hosting,\n        //tell the other client they are joining a session\n        //s=server message, j=you are joining, send them the host id\n        session_.socket_client.send('s.j.' + session_.socket_host.userid);\n        session_.socket_client.session = session_;\n\n        //now we tell both that the session is ready to start\n        //clients will reset their positions in this case.\n        session_.socket_client.send('s.r.' + String(cm.get_owntime()).replace('.', '-'));\n        session_.socket_host.send('s.r.' + String(cm.get_owntime()).replace('.', '-'));\n\n        //set this flag, so that the update loop can run it.\n        session_.active = true;\n    }\n\n    find_session_(socket_)\n    {\n        this.log_('looking for a session. We have : ' + this.session_count);\n        //if there are any sessions at all, no sessions? create one!\n        if (!this.session_count) { this.create_session_(socket_); return; }\n\n        //so there are sessions active,\n        //lets see if one needs another avatar\n        let joined_a_session = false;\n        //Check the list of sessions for an open session\n        for (let sessionid in this.sessions) // for all sessions\n        {\n            //only care about our own properties.\n            if (!this.sessions.hasOwnProperty(sessionid)) { continue; }\n            //get the session we are checking against\n            let session = this.sessions[sessionid];\n\n            //If the session is a avatar short\n            if (session.avatar_count < 2) //if less than 2 avatars\n            {\n                //someone wants us to join!\n                joined_a_session = true;\n                //increase the avatar count and store\n                //the avatar as the client of this session\n                session.socket_client = socket_;\n                session.avatars.other.socket = socket_;\n                session.avatar_count++;\n\n                //start running the session on the server,\n                //which will tell them to respawn/start\n                this.start_session_(session);\n            }\n        }\n\n        //now if we didn't join a session,\n        //we must create one\n        if (!joined_a_session) { this.create_session_(socket_); }\n    }\n};\n\n// on node.js\nlet server = new SvPresenter();\nserver.init_httpd();\nserver.init_socket();\n"]}